class Solution{
    
   
    // Function for finding maximum and value pair
    public static int lenOfLongSubarr (int A[], int N, int K) {
    //   Map<Long, Integer> preSumMap = new HashMap<>();
    //     long sum = 0;
    //     int maxLen = 0;
        
        
    //     for(int i=0;i<N;i++){
    //         sum+=A[i];
    //         if(sum==K){
    //             maxLen=Math.max(maxLen,i+1);
    //         }
    //         long rem=sum-K;
            
    //         if (preSumMap.containsKey(rem)) {
    //             int len = i - preSumMap.get(rem);
    //             maxLen = Math.max(maxLen, len);
    //         }
    //         if (!preSumMap.containsKey(sum)) {
    //             preSumMap.put(sum, i);
    //         }
    //     }
    //     return maxLen;
    int left=0,right=0;
    int sum=A[0];
    int maxLen=0;
    while(right<N){
        while(left<=right && sum>K){
            sum-=A[left];
            left++;
        }
        if(sum==K){
            maxLen=Math.max(maxLen,right-left+1);
        }
        right++;
        if(right<N) sum+=A[right];
        
        
        
    }
    return maxLen;
    
    }
}
